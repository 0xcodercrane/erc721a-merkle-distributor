{
  "address": "0x74482c175BF8494d9c29a7D4BD8fAD676De12AF4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FreeClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "costForMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "baseAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "freeClaimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "URI",
          "type": "string"
        }
      ],
      "name": "setTokenBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x61468092e633108faaf28cdc844272ede196a9d4f2d074a664ffdd469a463574",
  "receipt": {
    "to": null,
    "from": "0x1aeBc84042d8Fd415bBa14d25597B4C2748D52Eb",
    "contractAddress": "0x74482c175BF8494d9c29a7D4BD8fAD676De12AF4",
    "transactionIndex": 5,
    "gasUsed": "2150334",
    "logsBloom": "0x
    "blockHash": "0xae9595f8cd543efc8e4c6e7d478c03572377211faf3d7a785fce7b142bda6468",
    "transactionHash": "0x61468092e633108faaf28cdc844272ede196a9d4f2d074a664ffdd469a463574",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 10885568,
        "transactionHash": "0x61468092e633108faaf28cdc844272ede196a9d4f2d074a664ffdd469a463574",
        "address": "0x74482c175BF8494d9c29a7D4BD8fAD676De12AF4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001aebc84042d8fd415bba14d25597b4c2748d52eb"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xae9595f8cd543efc8e4c6e7d478c03572377211faf3d7a785fce7b142bda6468"
      }
    ],
    "blockNumber": 10885568,
    "cumulativeGasUsed": "2977078",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3456c21504892c3b0c9c4be0bbbb72b623ffd96a70c4424d80d8d111a52b5b56"
  ],
  "numDeployments": 7,
  "solcInputHash": "58aba3d9467c641c214567d92662a5a4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FreeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"costForMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"freeClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"URI\",\"type\":\"string\"}],\"name\":\"setTokenBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FuckFiat.sol\":\"FuckFiat\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa504ac17eb0298dcdf5733ce24021b4914f035b97f4400b92827341d3facb3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/FuckFiat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\r\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport '@openzeppelin/contracts/utils/cryptography/MerkleProof.sol';\\r\\n\\r\\nimport \\\"./libraries/ERC721A.sol\\\";\\r\\n\\r\\n\\r\\ncontract FuckFiat is Ownable, ERC721A, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n    using Strings for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n   \\r\\n    bool private _isActive = false;\\r\\n    bytes32 public merkleRoot;\\r\\n\\r\\n    uint256 public constant MAX_SUPPLY = 10000;\\r\\n    uint256 public mintPrice = 0.02 ether;\\r\\n\\r\\n    uint256 public totalMinted = 0;\\r\\n    string private _tokenBaseURI = \\\"\\\";\\r\\n\\r\\n    event FreeClaimed(address indexed account, uint256 amount);\\r\\n\\r\\n    mapping (address => bool) freeClaimedMap;\\r\\n\\r\\n    modifier onlyActive() {\\r\\n        require(_isActive && totalMinted < MAX_SUPPLY, 'not active');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(bytes32 _merkleRoot) ERC721A(\\\"FuckFiat\\\", \\\"FuckFiat\\\") {\\r\\n        merkleRoot = _merkleRoot;\\r\\n    }\\r\\n\\r\\n    function claim(uint256 index, uint256 baseAmount, bytes32[] calldata merkleProof) external onlyActive nonReentrant() {\\r\\n        require(!freeClaimedMap[msg.sender], \\\"already claimed!\\\");\\r\\n        uint256 freeAmount = freeClaimable(index, msg.sender, baseAmount, merkleProof);\\r\\n        require(freeAmount <= MAX_SUPPLY.sub(totalMinted), \\\"not enough nfts\\\");\\r\\n        require(freeAmount > 0, \\\"no nfts to claim\\\");\\r\\n        _safeMint(msg.sender, freeAmount);\\r\\n        \\r\\n        totalMinted += freeAmount;\\r\\n        freeClaimedMap[msg.sender] = true;\\r\\n        emit FreeClaimed(msg.sender, freeAmount);\\r\\n    }\\r\\n\\r\\n    function mint(uint256 amount) external payable onlyActive nonReentrant() {\\r\\n        require(amount > 0, \\\"zero count\\\");\\r\\n        require(amount <= MAX_SUPPLY.sub(totalMinted), \\\"not enough nfts\\\");\\r\\n\\r\\n        uint256 costForMinting = costForMint(amount);\\r\\n        if (costForMinting > 0) {\\r\\n            require(msg.value >= costForMinting, \\\"insufficient ETH amount\\\");\\r\\n        }\\r\\n\\r\\n        _transferETH(msg.sender, msg.value.sub(costForMinting));\\r\\n        _safeMint(msg.sender, amount);\\r\\n\\r\\n        totalMinted += amount;\\r\\n    }\\r\\n\\r\\n    function costForMint(uint256 amount) public view returns(uint256) {\\r\\n        return amount.mul(mintPrice);\\r\\n    }\\r\\n\\r\\n\\r\\n    function freeClaimable(uint256 index, address account, uint256 baseAmount, bytes32[] calldata merkleProof) public view returns(uint256) {\\r\\n        if (freeClaimedMap[account]) return 0;\\r\\n        bytes32 node = keccak256(abi.encodePacked(index, account, baseAmount));\\r\\n        bool isVerified = MerkleProof.verify(merkleProof, merkleRoot, node);\\r\\n        uint256 claimable = 0;\\r\\n        if (isVerified) {\\r\\n            if (baseAmount <= 8) {\\r\\n                claimable = 1;\\r\\n            } else if (baseAmount <= 19) {\\r\\n                claimable = 2;\\r\\n            } else {\\r\\n                claimable = 3;\\r\\n            }\\r\\n        }\\r\\n        return claimable;\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return _tokenBaseURI;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function _transferETH (address to, uint256 value) internal {\\r\\n        Address.sendValue(payable(to), value);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view override(ERC721A) returns (string memory)\\r\\n    {\\r\\n        return super.tokenURI(tokenId);\\r\\n    }\\r\\n\\r\\n    //=======================   Admin Functions =======================//\\r\\n    function startSale() external onlyOwner {\\r\\n        _isActive = true;\\r\\n    }\\r\\n\\r\\n    function endSale() external onlyOwner {\\r\\n        _isActive = false;\\r\\n    }\\r\\n\\r\\n    function withdraw() external onlyOwner nonReentrant {\\r\\n        uint256 balance = address(this).balance;\\r\\n        Address.sendValue(payable(owner()), balance);\\r\\n    }\\r\\n\\r\\n    function setTokenBaseURI(string memory URI) external onlyOwner {\\r\\n        _tokenBaseURI = URI;\\r\\n    }\\r\\n\\r\\n    function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\\r\\n        merkleRoot = _merkleRoot;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0xba1485afd3617919b6b426d58e36f0a7ed1e784e54b13fee50de68b543baba4c\",\"license\":\"MIT\"},\"contracts/libraries/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Creator: Chiru Labs\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\r\\nimport '@openzeppelin/contracts/utils/Address.sol';\\r\\nimport '@openzeppelin/contracts/utils/Context.sol';\\r\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\r\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\r\\n *\\r\\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\\r\\n *\\r\\n * Does not support burning tokens to address(0).\\r\\n *\\r\\n * Assumes that an owner cannot have more than the 2**128 - 1 (max value of uint128) of supply\\r\\n */\\r\\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\\r\\n    using Address for address;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    struct TokenOwnership {\\r\\n        address addr;\\r\\n        uint64 startTimestamp;\\r\\n    }\\r\\n\\r\\n    struct AddressData {\\r\\n        uint128 balance;\\r\\n        uint128 numberMinted;\\r\\n    }\\r\\n\\r\\n    uint256 internal currentIndex;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Mapping from token ID to ownership details\\r\\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\r\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\r\\n\\r\\n    // Mapping owner address to address data\\r\\n    mapping(address => AddressData) private _addressData;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return currentIndex;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n        return\\r\\n        interfaceId == type(IERC721).interfaceId ||\\r\\n        interfaceId == type(IERC721Metadata).interfaceId ||\\r\\n        super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner) public view override returns (uint256) {\\r\\n        require(owner != address(0), 'ERC721A: balance query for the zero address');\\r\\n        return uint256(_addressData[owner].balance);\\r\\n    }\\r\\n\\r\\n    function _numberMinted(address owner) internal view returns (uint256) {\\r\\n        require(owner != address(0), 'ERC721A: number minted query for the zero address');\\r\\n        return uint256(_addressData[owner].numberMinted);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\r\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\r\\n     */\\r\\n    function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\r\\n        require(_exists(tokenId), 'ERC721A: owner query for nonexistent token');\\r\\n\\r\\n    unchecked {\\r\\n        for (uint256 curr = tokenId; curr >= 0; curr--) {\\r\\n            TokenOwnership memory ownership = _ownerships[curr];\\r\\n            if (ownership.addr != address(0)) {\\r\\n                return ownership;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n        revert('ERC721A: unable to determine the owner of token');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\r\\n        return ownershipOf(tokenId).addr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), 'ERC721Metadata: URI query for nonexistent token');\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, can be overriden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return '';\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public override {\\r\\n        address owner = ERC721A.ownerOf(tokenId);\\r\\n        require(to != owner, 'ERC721A: approval to current owner');\\r\\n\\r\\n        require(\\r\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n            'ERC721A: approve caller is not owner nor approved for all'\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId, owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\r\\n        require(_exists(tokenId), 'ERC721A: approved query for nonexistent token');\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public override {\\r\\n        require(operator != _msgSender(), 'ERC721A: approve to caller');\\r\\n\\r\\n        _operatorApprovals[_msgSender()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public override {\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public override {\\r\\n        safeTransferFrom(from, to, tokenId, '');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public override {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(\\r\\n            _checkOnERC721Received(from, to, tokenId, _data),\\r\\n            'ERC721A: transfer to non ERC721Receiver implementer'\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\r\\n        return tokenId < currentIndex;\\r\\n    }\\r\\n\\r\\n    function _safeMint(address to, uint256 quantity) internal {\\r\\n        _safeMint(to, quantity, '');\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\r\\n     * - `quantity` must be greater than 0.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 quantity,\\r\\n        bytes memory _data\\r\\n    ) internal {\\r\\n        _mint(to, quantity, _data, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `quantity` must be greater than 0.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(\\r\\n        address to,\\r\\n        uint256 quantity,\\r\\n        bytes memory _data,\\r\\n        bool safe\\r\\n    ) internal {\\r\\n        uint256 startTokenId = currentIndex;\\r\\n        require(to != address(0), 'ERC721A: mint to the zero address');\\r\\n        require(quantity != 0, 'ERC721A: quantity must be greater than 0');\\r\\n\\r\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\r\\n        // Overflows are incredibly unrealistic.\\r\\n        // balance or numberMinted overflow if current value of either + quantity > 3.4e38 (2**128) - 1\\r\\n        // updatedIndex overflows if currentIndex + quantity > 1.56e77 (2**256) - 1\\r\\n    unchecked {\\r\\n        _addressData[to].balance += uint128(quantity);\\r\\n        _addressData[to].numberMinted += uint128(quantity);\\r\\n\\r\\n        _ownerships[startTokenId].addr = to;\\r\\n        _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\r\\n\\r\\n        uint256 updatedIndex = startTokenId;\\r\\n\\r\\n        for (uint256 i; i < quantity; i++) {\\r\\n            emit Transfer(address(0), to, updatedIndex);\\r\\n            if (safe) {\\r\\n                require(\\r\\n                    _checkOnERC721Received(address(0), to, updatedIndex, _data),\\r\\n                    'ERC721A: transfer to non ERC721Receiver implementer'\\r\\n                );\\r\\n            }\\r\\n\\r\\n            updatedIndex++;\\r\\n        }\\r\\n\\r\\n        currentIndex = updatedIndex;\\r\\n    }\\r\\n\\r\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) private {\\r\\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\r\\n\\r\\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\r\\n        getApproved(tokenId) == _msgSender() ||\\r\\n        isApprovedForAll(prevOwnership.addr, _msgSender()));\\r\\n\\r\\n        require(isApprovedOrOwner, 'ERC721A: transfer caller is not owner nor approved');\\r\\n\\r\\n        require(prevOwnership.addr == from, 'ERC721A: transfer from incorrect owner');\\r\\n        require(to != address(0), 'ERC721A: transfer to the zero address');\\r\\n\\r\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(address(0), tokenId, prevOwnership.addr);\\r\\n\\r\\n        // Underflow of the sender's balance is impossible because we check for\\r\\n        // ownership above and the recipient's balance can't realistically overflow.\\r\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\r\\n    unchecked {\\r\\n        _addressData[from].balance -= 1;\\r\\n        _addressData[to].balance += 1;\\r\\n\\r\\n        _ownerships[tokenId].addr = to;\\r\\n        _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\r\\n\\r\\n        // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\r\\n        // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\r\\n        uint256 nextTokenId = tokenId + 1;\\r\\n        if (_ownerships[nextTokenId].addr == address(0)) {\\r\\n            if (_exists(nextTokenId)) {\\r\\n                _ownerships[nextTokenId].addr = prevOwnership.addr;\\r\\n                _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n        _afterTokenTransfers(from, to, tokenId, 1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * Emits a {Approval} event.\\r\\n     */\\r\\n    function _approve(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        address owner\\r\\n    ) private {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(owner, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) private returns (bool) {\\r\\n        if (to.isContract()) {\\r\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\r\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert('ERC721A: transfer to non ERC721Receiver implementer');\\r\\n                } else {\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\r\\n     *\\r\\n     * startTokenId - the first token id to be transferred\\r\\n     * quantity - the amount to be transferred\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     */\\r\\n    function _beforeTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\r\\n     * minting.\\r\\n     *\\r\\n     * startTokenId - the first token id to be transferred\\r\\n     * quantity - the amount to be transferred\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     */\\r\\n    function _afterTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity\\r\\n    ) internal virtual {}\\r\\n}\",\"keccak256\":\"0x0f9fc0a120947cda735da655f8d0a73911d78f703016cce42d099ad6b83ffac9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6009805460ff1916905566470de4df820000600b556000600c81905560a0604081905260808290526200003691600d919062000153565b503480156200004457600080fd5b5060405162002590380380620025908339810160408190526200006791620001f9565b60405180604001604052806008815260200167119d58dad19a585d60c21b81525060405180604001604052806008815260200167119d58dad19a585d60c21b815250620000c3620000bd620000ff60201b60201c565b62000103565b8151620000d890600290602085019062000153565b508051620000ee90600390602084019062000153565b5050600160085550600a556200024f565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054620001619062000212565b90600052602060002090601f016020900481019282620001855760008555620001d0565b82601f10620001a057805160ff1916838001178555620001d0565b82800160010185558215620001d0579182015b82811115620001d0578251825591602001919060010190620001b3565b50620001de929150620001e2565b5090565b5b80821115620001de5760008155600101620001e3565b6000602082840312156200020b578081fd5b5051919050565b6002810460018216806200022757607f821691505b602082108114156200024957634e487b7160e01b600052602260045260246000fd5b50919050565b612331806200025f6000396000f3fe6080604052600436106101d15760003560e01c8063715018a6116100f7578063a2309ff811610095578063c87b56dd11610064578063c87b56dd146104df578063cdf5b962146104ff578063e985e9c51461051f578063f2fde38b14610568576101d8565b8063a2309ff814610474578063ae0b51df1461048a578063b66a0e5d146104aa578063b88d4fde146104bf576101d8565b80638ef79e91116100d15780638ef79e911461040c57806395d89b411461042c578063a0712d6814610441578063a22cb46514610454576101d8565b8063715018a6146103b95780637cb64759146103ce5780638da5cb5b146103ee576101d8565b80632eb4a7ab1161016f57806342842e0e1161013e57806342842e0e146103435780636352211e146103635780636817c76c1461038357806370a0823114610399576101d8565b80632eb4a7ab146102ed57806332cb6b0c14610303578063380d831b146103195780633ccfd60b1461032e576101d8565b8063095ea7b3116101ab578063095ea7b31461026c57806318160ddd1461028e57806323b872dd146102ad57806327ed69d2146102cd576101d8565b806301ffc9a7146101dd57806306fdde0314610212578063081812fc14610234576101d8565b366101d857005b600080fd5b3480156101e957600080fd5b506101fd6101f8366004611f0c565b610588565b60405190151581526020015b60405180910390f35b34801561021e57600080fd5b506102276105dc565b60405161020991906120d9565b34801561024057600080fd5b5061025461024f366004611ef4565b61066e565b6040516001600160a01b039091168152602001610209565b34801561027857600080fd5b5061028c610287366004611ecb565b6106fe565b005b34801561029a57600080fd5b506001545b604051908152602001610209565b3480156102b957600080fd5b5061028c6102c8366004611ddd565b610816565b3480156102d957600080fd5b5061029f6102e8366004611ef4565b610821565b3480156102f957600080fd5b5061029f600a5481565b34801561030f57600080fd5b5061029f61271081565b34801561032557600080fd5b5061028c610838565b34801561033a57600080fd5b5061028c61086e565b34801561034f57600080fd5b5061028c61035e366004611ddd565b6108e4565b34801561036f57600080fd5b5061025461037e366004611ef4565b6108ff565b34801561038f57600080fd5b5061029f600b5481565b3480156103a557600080fd5b5061029f6103b4366004611d91565b610911565b3480156103c557600080fd5b5061028c6109a2565b3480156103da57600080fd5b5061028c6103e9366004611ef4565b6109d8565b3480156103fa57600080fd5b506000546001600160a01b0316610254565b34801561041857600080fd5b5061028c610427366004611f44565b610a07565b34801561043857600080fd5b50610227610a48565b61028c61044f366004611ef4565b610a57565b34801561046057600080fd5b5061028c61046f366004611e91565b610bf8565b34801561048057600080fd5b5061029f600c5481565b34801561049657600080fd5b5061028c6104a5366004611ff0565b610cca565b3480156104b657600080fd5b5061028c610ec0565b3480156104cb57600080fd5b5061028c6104da366004611e18565b610ef9565b3480156104eb57600080fd5b506102276104fa366004611ef4565b610f32565b34801561050b57600080fd5b5061029f61051a366004611f8a565b610f3d565b34801561052b57600080fd5b506101fd61053a366004611dab565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b34801561057457600080fd5b5061028c610583366004611d91565b611025565b60006001600160e01b031982166380ac58cd60e01b14806105b957506001600160e01b03198216635b5e139f60e01b145b806105d457506301ffc9a760e01b6001600160e01b03198316145b90505b919050565b6060600280546105eb90612239565b80601f016020809104026020016040519081016040528092919081815260200182805461061790612239565b80156106645780601f1061063957610100808354040283529160200191610664565b820191906000526020600020905b81548152906001019060200180831161064757829003601f168201915b5050505050905090565b600061067b826001541190565b6106e25760405162461bcd60e51b815260206004820152602d60248201527f455243373231413a20617070726f76656420717565727920666f72206e6f6e6560448201526c3c34b9ba32b73a103a37b5b2b760991b60648201526084015b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000610709826108ff565b9050806001600160a01b0316836001600160a01b031614156107785760405162461bcd60e51b815260206004820152602260248201527f455243373231413a20617070726f76616c20746f2063757272656e74206f776e60448201526132b960f11b60648201526084016106d9565b336001600160a01b03821614806107945750610794813361053a565b6108065760405162461bcd60e51b815260206004820152603960248201527f455243373231413a20617070726f76652063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656420666f7220616c6c0000000000000060648201526084016106d9565b6108118383836110c0565b505050565b61081183838361111c565b60006105d4600b548361142090919063ffffffff16565b6000546001600160a01b031633146108625760405162461bcd60e51b81526004016106d9906120ec565b6009805460ff19169055565b6000546001600160a01b031633146108985760405162461bcd60e51b81526004016106d9906120ec565b600260085414156108bb5760405162461bcd60e51b81526004016106d990612174565b6002600855476108dc6108d66000546001600160a01b031690565b82611433565b506001600855565b61081183838360405180602001604052806000815250610ef9565b600061090a8261154c565b5192915050565b60006001600160a01b03821661097d5760405162461bcd60e51b815260206004820152602b60248201527f455243373231413a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084016106d9565b506001600160a01b03166000908152600560205260409020546001600160801b031690565b6000546001600160a01b031633146109cc5760405162461bcd60e51b81526004016106d9906120ec565b6109d66000611625565b565b6000546001600160a01b03163314610a025760405162461bcd60e51b81526004016106d9906120ec565b600a55565b6000546001600160a01b03163314610a315760405162461bcd60e51b81526004016106d9906120ec565b8051610a4490600d906020840190611c22565b5050565b6060600380546105eb90612239565b60095460ff168015610a6c5750612710600c54105b610aa55760405162461bcd60e51b815260206004820152600a6024820152696e6f742061637469766560b01b60448201526064016106d9565b60026008541415610ac85760405162461bcd60e51b81526004016106d990612174565b600260085580610b075760405162461bcd60e51b815260206004820152600a6024820152691e995c9bc818dbdd5b9d60b21b60448201526064016106d9565b600c54610b179061271090611675565b811115610b585760405162461bcd60e51b815260206004820152600f60248201526e6e6f7420656e6f756768206e66747360881b60448201526064016106d9565b6000610b6382610821565b90508015610bbb5780341015610bbb5760405162461bcd60e51b815260206004820152601760248201527f696e73756666696369656e742045544820616d6f756e7400000000000000000060448201526064016106d9565b610bce33610bc93484611675565b611681565b610bd8338361168b565b81600c6000828254610bea91906121ab565b909155505060016008555050565b6001600160a01b038216331415610c515760405162461bcd60e51b815260206004820152601a60248201527f455243373231413a20617070726f766520746f2063616c6c657200000000000060448201526064016106d9565b3360008181526007602090815260408083206001600160a01b0387168085529252909120805460ff1916841515179055906001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610cbe911515815260200190565b60405180910390a35050565b60095460ff168015610cdf5750612710600c54105b610d185760405162461bcd60e51b815260206004820152600a6024820152696e6f742061637469766560b01b60448201526064016106d9565b60026008541415610d3b5760405162461bcd60e51b81526004016106d990612174565b6002600855336000908152600e602052604090205460ff1615610d935760405162461bcd60e51b815260206004820152601060248201526f616c726561647920636c61696d65642160801b60448201526064016106d9565b6000610da28533868686610f3d565b9050610dbb600c5461271061167590919063ffffffff16565b811115610dfc5760405162461bcd60e51b815260206004820152600f60248201526e6e6f7420656e6f756768206e66747360881b60448201526064016106d9565b60008111610e3f5760405162461bcd60e51b815260206004820152601060248201526f6e6f206e66747320746f20636c61696d60801b60448201526064016106d9565b610e49338261168b565b80600c6000828254610e5b91906121ab565b9091555050336000818152600e602052604090819020805460ff19166001179055517f9a5144decc53f6b58f03259fdf3dbbe442204dc12e09343ea840eee6d6f4285290610eac9084815260200190565b60405180910390a250506001600855505050565b6000546001600160a01b03163314610eea5760405162461bcd60e51b81526004016106d9906120ec565b6009805460ff19166001179055565b610f0484848461111c565b610f10848484846116a5565b610f2c5760405162461bcd60e51b81526004016106d990612121565b50505050565b60606105d4826117b3565b6001600160a01b0384166000908152600e602052604081205460ff1615610f665750600061101c565b604080516020808201899052606088901b6bffffffffffffffffffffffff191682840152605480830188905283518084039091018152607483018085528151918301919091206094928702808501840190955286825293600093610fe993899289928392019084908082843760009201919091525050600a549150859050611880565b905060008115611017576008871161100357506001611017565b6013871161101357506002611017565b5060035b925050505b95945050505050565b6000546001600160a01b0316331461104f5760405162461bcd60e51b81526004016106d9906120ec565b6001600160a01b0381166110b45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106d9565b6110bd81611625565b50565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006111278261154c565b80519091506000906001600160a01b0316336001600160a01b0316148061115e5750336111538461066e565b6001600160a01b0316145b8061117057508151611170903361053a565b9050806111da5760405162461bcd60e51b815260206004820152603260248201527f455243373231413a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016106d9565b846001600160a01b031682600001516001600160a01b03161461124e5760405162461bcd60e51b815260206004820152602660248201527f455243373231413a207472616e736665722066726f6d20696e636f72726563746044820152651037bbb732b960d11b60648201526084016106d9565b6001600160a01b0384166112b25760405162461bcd60e51b815260206004820152602560248201527f455243373231413a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016106d9565b6112c260008484600001516110c0565b6001600160a01b03858116600090815260056020908152604080832080546001600160801b03198082166001600160801b03928316600019018316179092558986168086528386208054938416938316600190810190931693909317909255888552600490935281842080546001600160a01b03191690911767ffffffffffffffff60a01b1916600160a01b4267ffffffffffffffff16021790559086018083529120549091166113d657611378816001541190565b156113d6578251600082815260046020908152604090912080549186015167ffffffffffffffff16600160a01b0267ffffffffffffffff60a01b196001600160a01b039094166001600160a01b031990931692909217929092161790555b5082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b600061142c82846121d7565b9392505050565b804710156114835760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016106d9565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146114d0576040519150601f19603f3d011682016040523d82523d6000602084013e6114d5565b606091505b50509050806108115760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016106d9565b604080518082019091526000808252602082015261156b826001541190565b6115ca5760405162461bcd60e51b815260206004820152602a60248201527f455243373231413a206f776e657220717565727920666f72206e6f6e657869736044820152693a32b73a103a37b5b2b760b11b60648201526084016106d9565b815b6000818152600460209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff16918301919091521561161b5791506105d79050565b50600019016115cc565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061142c82846121f6565b610a448282611433565b610a44828260405180602001604052806000815250611896565b60006001600160a01b0384163b156117a757604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906116e990339089908890889060040161209c565b602060405180830381600087803b15801561170357600080fd5b505af1925050508015611733575060408051601f3d908101601f1916820190925261173091810190611f28565b60015b61178d573d808015611761576040519150601f19603f3d011682016040523d82523d6000602084013e611766565b606091505b5080516117855760405162461bcd60e51b81526004016106d990612121565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506117ab565b5060015b949350505050565b60606117c0826001541190565b6118245760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016106d9565b600061182e6118a3565b905080516000141561184f576040518060200160405280600081525061142c565b80611859846118b2565b60405160200161186a92919061206d565b6040516020818303038152906040529392505050565b60008261188d85846119cd565b14949350505050565b6108118383836001611a4f565b6060600d80546105eb90612239565b6060816118d757506040805180820190915260018152600360fc1b60208201526105d7565b8160005b811561190157806118eb81612274565b91506118fa9050600a836121c3565b91506118db565b60008167ffffffffffffffff81111561192a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611954576020820181803683370190505b5090505b84156117ab576119696001836121f6565b9150611976600a8661228f565b6119819060306121ab565b60f81b8183815181106119a457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506119c6600a866121c3565b9450611958565b600081815b8451811015611a475760008582815181106119fd57634e487b7160e01b600052603260045260246000fd5b60200260200101519050808311611a235760008381526020829052604090209250611a34565b600081815260208490526040902092505b5080611a3f81612274565b9150506119d2565b509392505050565b6001546001600160a01b038516611ab25760405162461bcd60e51b815260206004820152602160248201527f455243373231413a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016106d9565b83611b105760405162461bcd60e51b815260206004820152602860248201527f455243373231413a207175616e74697479206d75737420626520677265617465604482015267072207468616e20360c41b60648201526084016106d9565b6001600160a01b038516600081815260056020908152604080832080546001600160801b031981166001600160801b039182168b01821617808216600160801b9182900483168c01909216021790558483526004909152812080546001600160a01b03191690921767ffffffffffffffff60a01b1916600160a01b4267ffffffffffffffff16021790915581905b85811015611c195760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a48315611c0d57611bf160008884886116a5565b611c0d5760405162461bcd60e51b81526004016106d990612121565b60019182019101611b9e565b50600155611419565b828054611c2e90612239565b90600052602060002090601f016020900481019282611c505760008555611c96565b82601f10611c6957805160ff1916838001178555611c96565b82800160010185558215611c96579182015b82811115611c96578251825591602001919060010190611c7b565b50611ca2929150611ca6565b5090565b5b80821115611ca25760008155600101611ca7565b600067ffffffffffffffff80841115611cd657611cd66122cf565b604051601f8501601f19908116603f01168101908282118183101715611cfe57611cfe6122cf565b81604052809350858152868686011115611d1757600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146105d757600080fd5b60008083601f840112611d59578081fd5b50813567ffffffffffffffff811115611d70578182fd5b6020830191508360208083028501011115611d8a57600080fd5b9250929050565b600060208284031215611da2578081fd5b61142c82611d31565b60008060408385031215611dbd578081fd5b611dc683611d31565b9150611dd460208401611d31565b90509250929050565b600080600060608486031215611df1578081fd5b611dfa84611d31565b9250611e0860208501611d31565b9150604084013590509250925092565b60008060008060808587031215611e2d578081fd5b611e3685611d31565b9350611e4460208601611d31565b925060408501359150606085013567ffffffffffffffff811115611e66578182fd5b8501601f81018713611e76578182fd5b611e8587823560208401611cbb565b91505092959194509250565b60008060408385031215611ea3578182fd5b611eac83611d31565b915060208301358015158114611ec0578182fd5b809150509250929050565b60008060408385031215611edd578182fd5b611ee683611d31565b946020939093013593505050565b600060208284031215611f05578081fd5b5035919050565b600060208284031215611f1d578081fd5b813561142c816122e5565b600060208284031215611f39578081fd5b815161142c816122e5565b600060208284031215611f55578081fd5b813567ffffffffffffffff811115611f6b578182fd5b8201601f81018413611f7b578182fd5b6117ab84823560208401611cbb565b600080600080600060808688031215611fa1578081fd5b85359450611fb160208701611d31565b935060408601359250606086013567ffffffffffffffff811115611fd3578182fd5b611fdf88828901611d48565b969995985093965092949392505050565b60008060008060608587031215612005578182fd5b8435935060208501359250604085013567ffffffffffffffff811115612029578283fd5b61203587828801611d48565b95989497509550505050565b6000815180845261205981602086016020860161220d565b601f01601f19169290920160200192915050565b6000835161207f81846020880161220d565b83519083019061209381836020880161220d565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906120cf90830184612041565b9695505050505050565b60006020825261142c6020830184612041565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526033908201527f455243373231413a207472616e7366657220746f206e6f6e204552433732315260408201527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600082198211156121be576121be6122a3565b500190565b6000826121d2576121d26122b9565b500490565b60008160001904831182151516156121f1576121f16122a3565b500290565b600082821015612208576122086122a3565b500390565b60005b83811015612228578181015183820152602001612210565b83811115610f2c5750506000910152565b60028104600182168061224d57607f821691505b6020821081141561226e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612288576122886122a3565b5060010190565b60008261229e5761229e6122b9565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146110bd57600080fdfea2646970667358221220b3381b85c36cff9586061dcb206bf8533b7b7cda5fc8beac2e7b3779a68f377a64736f6c63430008020033",
  "deployedBytecode": "0x6080604052600436106101d15760003560e01c8063715018a6116100f7578063a2309ff811610095578063c87b56dd11610064578063c87b56dd146104df578063cdf5b962146104ff578063e985e9c51461051f578063f2fde38b14610568576101d8565b8063a2309ff814610474578063ae0b51df1461048a578063b66a0e5d146104aa578063b88d4fde146104bf576101d8565b80638ef79e91116100d15780638ef79e911461040c57806395d89b411461042c578063a0712d6814610441578063a22cb46514610454576101d8565b8063715018a6146103b95780637cb64759146103ce5780638da5cb5b146103ee576101d8565b80632eb4a7ab1161016f57806342842e0e1161013e57806342842e0e146103435780636352211e146103635780636817c76c1461038357806370a0823114610399576101d8565b80632eb4a7ab146102ed57806332cb6b0c14610303578063380d831b146103195780633ccfd60b1461032e576101d8565b8063095ea7b3116101ab578063095ea7b31461026c57806318160ddd1461028e57806323b872dd146102ad57806327ed69d2146102cd576101d8565b806301ffc9a7146101dd57806306fdde0314610212578063081812fc14610234576101d8565b366101d857005b600080fd5b3480156101e957600080fd5b506101fd6101f8366004611f0c565b610588565b60405190151581526020015b60405180910390f35b34801561021e57600080fd5b506102276105dc565b60405161020991906120d9565b34801561024057600080fd5b5061025461024f366004611ef4565b61066e565b6040516001600160a01b039091168152602001610209565b34801561027857600080fd5b5061028c610287366004611ecb565b6106fe565b005b34801561029a57600080fd5b506001545b604051908152602001610209565b3480156102b957600080fd5b5061028c6102c8366004611ddd565b610816565b3480156102d957600080fd5b5061029f6102e8366004611ef4565b610821565b3480156102f957600080fd5b5061029f600a5481565b34801561030f57600080fd5b5061029f61271081565b34801561032557600080fd5b5061028c610838565b34801561033a57600080fd5b5061028c61086e565b34801561034f57600080fd5b5061028c61035e366004611ddd565b6108e4565b34801561036f57600080fd5b5061025461037e366004611ef4565b6108ff565b34801561038f57600080fd5b5061029f600b5481565b3480156103a557600080fd5b5061029f6103b4366004611d91565b610911565b3480156103c557600080fd5b5061028c6109a2565b3480156103da57600080fd5b5061028c6103e9366004611ef4565b6109d8565b3480156103fa57600080fd5b506000546001600160a01b0316610254565b34801561041857600080fd5b5061028c610427366004611f44565b610a07565b34801561043857600080fd5b50610227610a48565b61028c61044f366004611ef4565b610a57565b34801561046057600080fd5b5061028c61046f366004611e91565b610bf8565b34801561048057600080fd5b5061029f600c5481565b34801561049657600080fd5b5061028c6104a5366004611ff0565b610cca565b3480156104b657600080fd5b5061028c610ec0565b3480156104cb57600080fd5b5061028c6104da366004611e18565b610ef9565b3480156104eb57600080fd5b506102276104fa366004611ef4565b610f32565b34801561050b57600080fd5b5061029f61051a366004611f8a565b610f3d565b34801561052b57600080fd5b506101fd61053a366004611dab565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b34801561057457600080fd5b5061028c610583366004611d91565b611025565b60006001600160e01b031982166380ac58cd60e01b14806105b957506001600160e01b03198216635b5e139f60e01b145b806105d457506301ffc9a760e01b6001600160e01b03198316145b90505b919050565b6060600280546105eb90612239565b80601f016020809104026020016040519081016040528092919081815260200182805461061790612239565b80156106645780601f1061063957610100808354040283529160200191610664565b820191906000526020600020905b81548152906001019060200180831161064757829003601f168201915b5050505050905090565b600061067b826001541190565b6106e25760405162461bcd60e51b815260206004820152602d60248201527f455243373231413a20617070726f76656420717565727920666f72206e6f6e6560448201526c3c34b9ba32b73a103a37b5b2b760991b60648201526084015b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000610709826108ff565b9050806001600160a01b0316836001600160a01b031614156107785760405162461bcd60e51b815260206004820152602260248201527f455243373231413a20617070726f76616c20746f2063757272656e74206f776e60448201526132b960f11b60648201526084016106d9565b336001600160a01b03821614806107945750610794813361053a565b6108065760405162461bcd60e51b815260206004820152603960248201527f455243373231413a20617070726f76652063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656420666f7220616c6c0000000000000060648201526084016106d9565b6108118383836110c0565b505050565b61081183838361111c565b60006105d4600b548361142090919063ffffffff16565b6000546001600160a01b031633146108625760405162461bcd60e51b81526004016106d9906120ec565b6009805460ff19169055565b6000546001600160a01b031633146108985760405162461bcd60e51b81526004016106d9906120ec565b600260085414156108bb5760405162461bcd60e51b81526004016106d990612174565b6002600855476108dc6108d66000546001600160a01b031690565b82611433565b506001600855565b61081183838360405180602001604052806000815250610ef9565b600061090a8261154c565b5192915050565b60006001600160a01b03821661097d5760405162461bcd60e51b815260206004820152602b60248201527f455243373231413a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084016106d9565b506001600160a01b03166000908152600560205260409020546001600160801b031690565b6000546001600160a01b031633146109cc5760405162461bcd60e51b81526004016106d9906120ec565b6109d66000611625565b565b6000546001600160a01b03163314610a025760405162461bcd60e51b81526004016106d9906120ec565b600a55565b6000546001600160a01b03163314610a315760405162461bcd60e51b81526004016106d9906120ec565b8051610a4490600d906020840190611c22565b5050565b6060600380546105eb90612239565b60095460ff168015610a6c5750612710600c54105b610aa55760405162461bcd60e51b815260206004820152600a6024820152696e6f742061637469766560b01b60448201526064016106d9565b60026008541415610ac85760405162461bcd60e51b81526004016106d990612174565b600260085580610b075760405162461bcd60e51b815260206004820152600a6024820152691e995c9bc818dbdd5b9d60b21b60448201526064016106d9565b600c54610b179061271090611675565b811115610b585760405162461bcd60e51b815260206004820152600f60248201526e6e6f7420656e6f756768206e66747360881b60448201526064016106d9565b6000610b6382610821565b90508015610bbb5780341015610bbb5760405162461bcd60e51b815260206004820152601760248201527f696e73756666696369656e742045544820616d6f756e7400000000000000000060448201526064016106d9565b610bce33610bc93484611675565b611681565b610bd8338361168b565b81600c6000828254610bea91906121ab565b909155505060016008555050565b6001600160a01b038216331415610c515760405162461bcd60e51b815260206004820152601a60248201527f455243373231413a20617070726f766520746f2063616c6c657200000000000060448201526064016106d9565b3360008181526007602090815260408083206001600160a01b0387168085529252909120805460ff1916841515179055906001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610cbe911515815260200190565b60405180910390a35050565b60095460ff168015610cdf5750612710600c54105b610d185760405162461bcd60e51b815260206004820152600a6024820152696e6f742061637469766560b01b60448201526064016106d9565b60026008541415610d3b5760405162461bcd60e51b81526004016106d990612174565b6002600855336000908152600e602052604090205460ff1615610d935760405162461bcd60e51b815260206004820152601060248201526f616c726561647920636c61696d65642160801b60448201526064016106d9565b6000610da28533868686610f3d565b9050610dbb600c5461271061167590919063ffffffff16565b811115610dfc5760405162461bcd60e51b815260206004820152600f60248201526e6e6f7420656e6f756768206e66747360881b60448201526064016106d9565b60008111610e3f5760405162461bcd60e51b815260206004820152601060248201526f6e6f206e66747320746f20636c61696d60801b60448201526064016106d9565b610e49338261168b565b80600c6000828254610e5b91906121ab565b9091555050336000818152600e602052604090819020805460ff19166001179055517f9a5144decc53f6b58f03259fdf3dbbe442204dc12e09343ea840eee6d6f4285290610eac9084815260200190565b60405180910390a250506001600855505050565b6000546001600160a01b03163314610eea5760405162461bcd60e51b81526004016106d9906120ec565b6009805460ff19166001179055565b610f0484848461111c565b610f10848484846116a5565b610f2c5760405162461bcd60e51b81526004016106d990612121565b50505050565b60606105d4826117b3565b6001600160a01b0384166000908152600e602052604081205460ff1615610f665750600061101c565b604080516020808201899052606088901b6bffffffffffffffffffffffff191682840152605480830188905283518084039091018152607483018085528151918301919091206094928702808501840190955286825293600093610fe993899289928392019084908082843760009201919091525050600a549150859050611880565b905060008115611017576008871161100357506001611017565b6013871161101357506002611017565b5060035b925050505b95945050505050565b6000546001600160a01b0316331461104f5760405162461bcd60e51b81526004016106d9906120ec565b6001600160a01b0381166110b45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106d9565b6110bd81611625565b50565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006111278261154c565b80519091506000906001600160a01b0316336001600160a01b0316148061115e5750336111538461066e565b6001600160a01b0316145b8061117057508151611170903361053a565b9050806111da5760405162461bcd60e51b815260206004820152603260248201527f455243373231413a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016106d9565b846001600160a01b031682600001516001600160a01b03161461124e5760405162461bcd60e51b815260206004820152602660248201527f455243373231413a207472616e736665722066726f6d20696e636f72726563746044820152651037bbb732b960d11b60648201526084016106d9565b6001600160a01b0384166112b25760405162461bcd60e51b815260206004820152602560248201527f455243373231413a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016106d9565b6112c260008484600001516110c0565b6001600160a01b03858116600090815260056020908152604080832080546001600160801b03198082166001600160801b03928316600019018316179092558986168086528386208054938416938316600190810190931693909317909255888552600490935281842080546001600160a01b03191690911767ffffffffffffffff60a01b1916600160a01b4267ffffffffffffffff16021790559086018083529120549091166113d657611378816001541190565b156113d6578251600082815260046020908152604090912080549186015167ffffffffffffffff16600160a01b0267ffffffffffffffff60a01b196001600160a01b039094166001600160a01b031990931692909217929092161790555b5082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b600061142c82846121d7565b9392505050565b804710156114835760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016106d9565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146114d0576040519150601f19603f3d011682016040523d82523d6000602084013e6114d5565b606091505b50509050806108115760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016106d9565b604080518082019091526000808252602082015261156b826001541190565b6115ca5760405162461bcd60e51b815260206004820152602a60248201527f455243373231413a206f776e657220717565727920666f72206e6f6e657869736044820152693a32b73a103a37b5b2b760b11b60648201526084016106d9565b815b6000818152600460209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff16918301919091521561161b5791506105d79050565b50600019016115cc565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061142c82846121f6565b610a448282611433565b610a44828260405180602001604052806000815250611896565b60006001600160a01b0384163b156117a757604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906116e990339089908890889060040161209c565b602060405180830381600087803b15801561170357600080fd5b505af1925050508015611733575060408051601f3d908101601f1916820190925261173091810190611f28565b60015b61178d573d808015611761576040519150601f19603f3d011682016040523d82523d6000602084013e611766565b606091505b5080516117855760405162461bcd60e51b81526004016106d990612121565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506117ab565b5060015b949350505050565b60606117c0826001541190565b6118245760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016106d9565b600061182e6118a3565b905080516000141561184f576040518060200160405280600081525061142c565b80611859846118b2565b60405160200161186a92919061206d565b6040516020818303038152906040529392505050565b60008261188d85846119cd565b14949350505050565b6108118383836001611a4f565b6060600d80546105eb90612239565b6060816118d757506040805180820190915260018152600360fc1b60208201526105d7565b8160005b811561190157806118eb81612274565b91506118fa9050600a836121c3565b91506118db565b60008167ffffffffffffffff81111561192a57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611954576020820181803683370190505b5090505b84156117ab576119696001836121f6565b9150611976600a8661228f565b6119819060306121ab565b60f81b8183815181106119a457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506119c6600a866121c3565b9450611958565b600081815b8451811015611a475760008582815181106119fd57634e487b7160e01b600052603260045260246000fd5b60200260200101519050808311611a235760008381526020829052604090209250611a34565b600081815260208490526040902092505b5080611a3f81612274565b9150506119d2565b509392505050565b6001546001600160a01b038516611ab25760405162461bcd60e51b815260206004820152602160248201527f455243373231413a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016106d9565b83611b105760405162461bcd60e51b815260206004820152602860248201527f455243373231413a207175616e74697479206d75737420626520677265617465604482015267072207468616e20360c41b60648201526084016106d9565b6001600160a01b038516600081815260056020908152604080832080546001600160801b031981166001600160801b039182168b01821617808216600160801b9182900483168c01909216021790558483526004909152812080546001600160a01b03191690921767ffffffffffffffff60a01b1916600160a01b4267ffffffffffffffff16021790915581905b85811015611c195760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a48315611c0d57611bf160008884886116a5565b611c0d5760405162461bcd60e51b81526004016106d990612121565b60019182019101611b9e565b50600155611419565b828054611c2e90612239565b90600052602060002090601f016020900481019282611c505760008555611c96565b82601f10611c6957805160ff1916838001178555611c96565b82800160010185558215611c96579182015b82811115611c96578251825591602001919060010190611c7b565b50611ca2929150611ca6565b5090565b5b80821115611ca25760008155600101611ca7565b600067ffffffffffffffff80841115611cd657611cd66122cf565b604051601f8501601f19908116603f01168101908282118183101715611cfe57611cfe6122cf565b81604052809350858152868686011115611d1757600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146105d757600080fd5b60008083601f840112611d59578081fd5b50813567ffffffffffffffff811115611d70578182fd5b6020830191508360208083028501011115611d8a57600080fd5b9250929050565b600060208284031215611da2578081fd5b61142c82611d31565b60008060408385031215611dbd578081fd5b611dc683611d31565b9150611dd460208401611d31565b90509250929050565b600080600060608486031215611df1578081fd5b611dfa84611d31565b9250611e0860208501611d31565b9150604084013590509250925092565b60008060008060808587031215611e2d578081fd5b611e3685611d31565b9350611e4460208601611d31565b925060408501359150606085013567ffffffffffffffff811115611e66578182fd5b8501601f81018713611e76578182fd5b611e8587823560208401611cbb565b91505092959194509250565b60008060408385031215611ea3578182fd5b611eac83611d31565b915060208301358015158114611ec0578182fd5b809150509250929050565b60008060408385031215611edd578182fd5b611ee683611d31565b946020939093013593505050565b600060208284031215611f05578081fd5b5035919050565b600060208284031215611f1d578081fd5b813561142c816122e5565b600060208284031215611f39578081fd5b815161142c816122e5565b600060208284031215611f55578081fd5b813567ffffffffffffffff811115611f6b578182fd5b8201601f81018413611f7b578182fd5b6117ab84823560208401611cbb565b600080600080600060808688031215611fa1578081fd5b85359450611fb160208701611d31565b935060408601359250606086013567ffffffffffffffff811115611fd3578182fd5b611fdf88828901611d48565b969995985093965092949392505050565b60008060008060608587031215612005578182fd5b8435935060208501359250604085013567ffffffffffffffff811115612029578283fd5b61203587828801611d48565b95989497509550505050565b6000815180845261205981602086016020860161220d565b601f01601f19169290920160200192915050565b6000835161207f81846020880161220d565b83519083019061209381836020880161220d565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906120cf90830184612041565b9695505050505050565b60006020825261142c6020830184612041565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526033908201527f455243373231413a207472616e7366657220746f206e6f6e204552433732315260408201527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600082198211156121be576121be6122a3565b500190565b6000826121d2576121d26122b9565b500490565b60008160001904831182151516156121f1576121f16122a3565b500290565b600082821015612208576122086122a3565b500390565b60005b83811015612228578181015183820152602001612210565b83811115610f2c5750506000910152565b60028104600182168061224d57607f821691505b6020821081141561226e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612288576122886122a3565b5060010190565b60008261229e5761229e6122b9565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146110bd57600080fdfea2646970667358221220b3381b85c36cff9586061dcb206bf8533b7b7cda5fc8beac2e7b3779a68f377a64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/FuckFiat.sol:FuckFiat",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2044,
        "contract": "contracts/FuckFiat.sol:FuckFiat",
        "label": "currentIndex",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2046,
        "contract": "contracts/FuckFiat.sol:FuckFiat",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2048,
        "contract": "contracts/FuckFiat.sol:FuckFiat",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2053,
        "contract": "contracts/FuckFiat.sol:FuckFiat",
        "label": "_ownerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(TokenOwnership)2037_storage)"
      },
      {
        "astId": 2058,
        "contract": "contracts/FuckFiat.sol:FuckFiat",
        "label": "_addressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(AddressData)2042_storage)"
      },
      {
        "astId": 2062,
        "contract": "contracts/FuckFiat.sol:FuckFiat",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2068,
        "contract": "contracts/FuckFiat.sol:FuckFiat",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 115,
        "contract": "contracts/FuckFiat.sol:FuckFiat",
        "label": "_status",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1598,
        "contract": "contracts/FuckFiat.sol:FuckFiat",
        "label": "_isActive",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 1600,
        "contract": "contracts/FuckFiat.sol:FuckFiat",
        "label": "merkleRoot",
        "offset": 0,
        "slot": "10",
        "type": "t_bytes32"
      },
      {
        "astId": 1606,
        "contract": "contracts/FuckFiat.sol:FuckFiat",
        "label": "mintPrice",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1609,
        "contract": "contracts/FuckFiat.sol:FuckFiat",
        "label": "totalMinted",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1612,
        "contract": "contracts/FuckFiat.sol:FuckFiat",
        "label": "_tokenBaseURI",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 1622,
        "contract": "contracts/FuckFiat.sol:FuckFiat",
        "label": "freeClaimedMap",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(AddressData)2042_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721A.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)2042_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenOwnership)2037_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenOwnership)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenOwnership)2037_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)2042_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.AddressData",
        "members": [
          {
            "astId": 2039,
            "contract": "contracts/FuckFiat.sol:FuckFiat",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 2041,
            "contract": "contracts/FuckFiat.sol:FuckFiat",
            "label": "numberMinted",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenOwnership)2037_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenOwnership",
        "members": [
          {
            "astId": 2034,
            "contract": "contracts/FuckFiat.sol:FuckFiat",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2036,
            "contract": "contracts/FuckFiat.sol:FuckFiat",
            "label": "startTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}